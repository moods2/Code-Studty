JSP, Java Server Pages
- 서블릿의 다음 버전

서블릿 장점
- 자바를 사용할 수 있다. > 웹 적용
- 자바 기반

서블릿 단점
- HTML, CSS, JavaScript 작성이 힘듬 > 문자열 취급

JSP 장점
- HTML, CSS, JavaScript 작성이 쉬움
- 웹 페이지 기반

JSP 단점
- 자바 작업이 좀 불편하다. > 툴 기능 부족




JSP 기본 요소
1. JSP 지시자(지시어), JSP Directive
2. 스크립트 요소, Scripting Elements
3. 액션 태그, Action Tags


1. JSP 지시자(지시어, JSP Directive
- <%@ XXX %>
- JSP 페이지를 실행하기 위해 JSP 컨테이너(톰캣)에게 
해당 JSP를 처리하기 위한 여러가지 환경 설정을 한다.
	a. page 지시자
	b. include 지시자
	c. taglib 지시자

	
2. 스크립트 요소, Scripting Elements
- <% %>
- 자바 구문을 쓸 수 있게 해준다.(자바 환경을 만든다.)
	a. 스크립틀릿, Scriptlet(Script + Applet)
	b. 표현식, Expression
	c. 선언부, Declaration
	
	
3. 액션 태그, Action Tags
- <jsp:XXX>, <c:XXX>
- 프로그래밍 기능을 하는 태그
- <c:if>, <c:forEach>
	a. JSP 기본 액션 태그
	b. JSTL 확장 액션 태그
	c. 사용자 커스텀 액션 태그




page 지시자
- <%@ page 속성="값" 속성="값" 속성="값".. %>
- <%@ page language="java" contentType="text/html; charset=UTF-8"
    pageEncoding="UTF-8"%>
    
a. language
	- JSP 페이지에서 사용할 프로그래밍 언어 지정

b. contentType
	- 현재 페이지 콘텐츠에 대한 기술
	- contentType="text/html; charset=UTF-8" //현재 개발 환경
	- contentType="text/html; charset=ISO-8859-1"
	- text/html : MIME Type 열거형, 웹서버가 브라우저에게 웹 페이지를 전달할 때
	이 페이지는 이런 형식의 페이지다.. 라고 알려주는 역할
	- text/xml, image/jpeg, image/png, image/gif 등..
	- charset : 웹서버가 현재 JSP 페이지를 해석할 때 사용할 인코딩 방식
	
c. pageEncoding
	- 웹서버가 브라우저에게 페이지를 해석할 때 사용할 인코딩 방식
	
d. import
	- 패키지 or 클래스 참조
	- 자바의 import와 동일한 역할
	
e. session

f. buffer

g. autoFlush

h. info

i. errorPage
	- 에러 페이지로 사용할 페이지 URL 지정



include 지시자
- <%@ include file="URL" %>
- 특정 JSP/HTML 페이지를 해당 JSP 페이지의 일부 영역에 삽입하는 기술
- 조각 페이지
- <iframe> 태그와 유사한 역할


taglib 지시자
- 액션 태그에서 사용




스크립틀릿, Scriptlet(Script + Applet)
- <% %>
- 이 영역은 자바 영역이다.
- 비즈니스 코드 작업
	a. 데이터 가공/처리(Oracle)
	b. 동적 HTML(CSS, JavaScript)
- 사용 빈도 높음


표현식, Expression
- <%= 값 %>
- 값: 변수, 상수, 메소드 반환값 등..
- 출력 목적!! > HTML의 소스 일부를 작성하기 위해서(*****)


선언부, Declaration
- <%! %>
- 현재 JSP 페이지에서 사용할 변수와 메소드를 선언하는 영역
- 잘 사용 안함 > 불편함 -> 대신 사용하는 방법





서블릿 동작 순서
- 서블릿은 서블릿 컨테이너가 생성부터 소멸까지 관리/운영한다.

1. 사용자 URL 요청 > HTTP Request 발생

2. 아파치에 전달 > 확장자 판단

3. 요청을 톰캣에게 전달
	- 사전에 웹 서버측에 [URL + 서블릿]로 미리 매핑되어 있는 내용이
		배포 서술자(Deployment Descriptor - web.xml)

4. Test.java 검색

5. 컴파일 유무 > 컴파일(javac.exe)

6. 실행(Run - java.exe)

7. 서블릿 인스턴스 + 실행(메모리)

8. request, response 객체 생성
	- 톰캣이 요청에 따른 처리를 하기 위해서
		HttpServletRequest, HttpServletResponse 객체를 생성한다.
		
9. service() 메소드 호출
	- service() 메소드내에서 현재 요청 방식이 GET or POST 방식인지를 판단
	- GET -> doGet() 메소드 호출 + 8번 객체를 같이 전달
	- POST -> doPost() 메소드 호출 + 8번 객체를 같이 전달

10. doGet()/doPost() 메소드 호출
	- HTML 페이지를 동적으로 생성한다. + PrintWriter 객체를 사용해서
	- 개발자가 대부분 코드 작성하는 영역
	
11. HTTP Response
	- 10번에 만든 HTML 페이지 > response 객체에 담는다. >
		웹서버(아파치)에게 전달한다.
	- 페이지를 만드는데 사용한 모든 자원 소멸시킨다. > 객체는 소멸시키지 않음(비용↓) (***********)
	- request, response 객체 소멸 (***********)
		
12. 아파치
	- HTML 페이지를 브라우저에게 전달한다.

13. 브라우저 실행



동적으로 HTML 페이지를 만드는 역할
- Servlet : 알바생
- JSP : 알바생
- JSP 페이지도 자바 파일이다.


JSP 내장 객체, JSP Implicit Object
- 개발자 직접 생성하지 않지만, JSP 컨테이너가 미리 만들어서 제공하는 객체

- request, response, session, pageContext, out, application, config, page, exception

- request, response, session, pageContext > out, application > config, page, exception

- request, session, pageContext, application
	: 내부에 사용자 데이터를 저장할 수 있는 Map을 가지고 있다.
	: setAttribute(key, value), getAttribute(key)
	
a. request
	a.1 전송된 데이터 가져오기
	a.2 전송된 데이터 인코딩
	a.3 전송된 관련된 정보 가져오기

b. response
	b.1 임시 페이지 만들기(response.getWriter() -> PrintWriter)
	b.2 페이지 이동하기
	b.3 페이지 인코딩

c. pageContext
	- javax.servlet.jsp.PageContext
	- 페이지 실행에 필요한 컨텍스트 정보를 저장한 객체
	- ex13_pageContext_one.jsp
	- ex13_pageContext_two.jsp
	c.1 페이지 이동
	c.2 데이터 전달(보조 역할)
	
d. out
	- 응답 페이지 전송을 위한 출력 스트림 객체
	- 서블릿 PrintWriter 유사 객체
	d.1 HTML 출력
	d.2 출력 버퍼 제어(특수)
	
e. application
	- 웹 어플리케이션의 여러가지 정보 제공
	
f. session(**********************************)
	- 클라이언트 세션 정보를 관리하는 객체



















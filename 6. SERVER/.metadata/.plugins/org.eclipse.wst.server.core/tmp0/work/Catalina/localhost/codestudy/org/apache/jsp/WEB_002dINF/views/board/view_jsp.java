/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.56
 * Generated at: 2020-07-31 05:24:05 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class view_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/views/inc/asset.jsp", Long.valueOf(1596172890723L));
    _jspx_dependants.put("/WEB-INF/views/inc/footer.jsp", Long.valueOf(1596172890629L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\r\n");
      out.write("<title>CodeStudy::Board</title>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("    \r\n");
      out.write("<link rel=\"stylesheet\" href=\"/codestudy/node_modules/bootstrap/dist/css/bootstrap.css\">\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/codestudy/css/main.css\">\r\n");
      out.write("<link rel=\"shortcut icon\" href=\"/codestudy/images/favicon.ico\">\r\n");
      out.write("\r\n");
      out.write("<script src=\"/codestudy/node_modules/jquery/dist/jquery.js\"></script>\r\n");
      out.write("<script src=\"/codestudy/node_modules/bootstrap/dist/js/bootstrap.js\"></script>");
      out.write("\r\n");
      out.write("<link rel=\"stylesheet\" href=\"/codestudy/css/board.css\">\r\n");
      out.write("\r\n");
      out.write("<style>\r\n");
      out.write("\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("\t<!-- ########## 상단 헤더 시작 -->\r\n");
      out.write("\t");

		out.flush();
	    RequestDispatcher dheader = request.getRequestDispatcher("/inc/header.do");
	    dheader.include(request, response);
	
      out.write("\r\n");
      out.write("\t<!-- ########## 상단 헤더 끝 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<!-- ########## 본문 시작 -->\r\n");
      out.write("\t<div class=\"main\">\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- ########## 좌측 시작 -->\r\n");
      out.write("\t\t<div class=\"menu col-sm-12 col-md-3\">\r\n");
      out.write("\t\t\t<!-- ########## 메뉴 시작 -->\r\n");
      out.write("\t\t\t");

				out.flush();
			    RequestDispatcher dmenu = request.getRequestDispatcher("/inc/menu.do");
				dmenu.include(request, response);
			
      out.write("\r\n");
      out.write("\t\t\t<!-- ########## 메뉴 끝 -->\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- ########## 인증 시작 -->\r\n");
      out.write("\t\t\t");

				out.flush();
			    RequestDispatcher dauth = request.getRequestDispatcher("/inc/auth.do");
			    dauth.include(request, response);
			
      out.write("\r\n");
      out.write("\t\t\t<!-- ########## 인증 끝 -->\r\n");
      out.write("\r\n");
      out.write("\t\t\t<!-- ########## 채팅 시작 -->\r\n");
      out.write("\t\t\t");

				out.flush();
			    RequestDispatcher dchat = request.getRequestDispatcher("/inc/chat.do");
				dchat.include(request, response);
			
      out.write("\r\n");
      out.write("\t\t\t<!-- ########## 채팅 끝 -->\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- ########## 좌측 끝 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t\t<!-- ########## 내용 시작 -->\r\n");
      out.write("\t\t<div class=\"content col-sm-12 col-md-9\">\r\n");
      out.write("\t\t\t<div>\r\n");
      out.write("\t\t\t\t<h1>자유 게시판 <small>Board</small></h1>\r\n");
      out.write("                \r\n");
      out.write("                <table class=\"table view\">\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <span class=\"seq\">1.</span>\r\n");
      out.write("                            <span class=\"subject\">제목입니다.</span>\r\n");
      out.write("                            <span class=\"readcount\">읽음(20)</span>\r\n");
      out.write("                            <span class=\"date\">2020-01-01 10:10:10</span>\r\n");
      out.write("                            <span class=\"name\">홍길동(hong)</span>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td class=\"content\">\r\n");
      out.write("                            카카오모빌리티는 24일 ‘카카오 T 블루’에 중형택시 최초로 앱미터기를 적용했다.\r\n");
      out.write("                            <br><br>\r\n");
      out.write("                            카카오모빌리티의 앱미터기는 GPS를 기반으로 시간, 거리, 속도를 계산해 택시 요금을 산정한다. 택시기사는 기사용 '카카오T' 앱을 통해 앱미터기를 사용할 수 있다. 승객은 승객용 '카카오T' 앱을 통해 실시간으로 요금을 확인할 수 있다.\r\n");
      out.write("                            <br><br>\r\n");
      out.write("                            앱미터기는 플랫폼 업데이트를 통해 별도의 교체 비용 없이 빠르게 요금제 변경이 가능하다. 또한 탄력요금제 적용 등 다양한 부가서비스로의 확장도 용이하다. 기존 기계식 미터기는 요금제 변경 시 기사가 직접 검정소를 찾아가 기기를 조정해야 했다. 교체 비용만 6만원에 달한다.\r\n");
      out.write("                            <br><br>\r\n");
      out.write("                            유료 도로 비용이나 시계외 할증 비용이 앱에서 자동으로 계산된다. 이에 시계외 할증이나 유료 도로를 미리 누르는 조작 방법으로 부당한 요금을 청구하는 위법행위를 막을 수 있다.\r\n");
      out.write("                            <br><br>\r\n");
      out.write("                            이용자가 앱을 통해 요금을 실시간으로 확인할 수 있는 것도 장점이다. 또한 요금 오입력에 따른 요금 분쟁 가능성도 낮출 수 있어 기사와 승객 모두 편익이 향상될 것으로 기대된다.\r\n");
      out.write("                            <br><br>\r\n");
      out.write("                            앱미터기는 주요 글로벌 차량 호출 서비스에 활발하게 적용되며 전 세계적으로 확산되고 있다. 국내는 현행 자동차관리법령 상 바퀴 회전수에 따라 거리, 속도를 측정해 요금을 산정하는 기계식 택시 미터기만을 규정하고 있다. 카카오 T 블랙 등 일부 특화된 택시서비스에만 제한적으로 앱미터기 적용이 허용돼 왔다.\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <!-- \r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <span class=\"glyphicon glyphicon-floppy-disk\"></span> test.zip\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                     -->\r\n");
      out.write("                    <!-- \r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <button type=\"button\" class=\"btn btn-default\">\r\n");
      out.write("                                <span class=\"glyphicon glyphicon-thumbs-up\"></span>\r\n");
      out.write("                                추천\r\n");
      out.write("                            </button>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                     -->\r\n");
      out.write("                </table>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <div class=\"btns btn-group\">\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-default\" onclick=\"location.href='/codestudy/board/list.do';\">\r\n");
      out.write("                        <span class=\"glyphicon glyphicon-th-list\"></span>\r\n");
      out.write("                        목록\r\n");
      out.write("                    </button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-default\" onclick=\"location.href='/codestudy/board/edit.do';\">\r\n");
      out.write("                        <span class=\"glyphicon glyphicon-minus\"></span>\r\n");
      out.write("                        수정\r\n");
      out.write("                    </button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-default\" onclick=\"location.href='/codestudy/board/delete.do';\">\r\n");
      out.write("                        <span class=\"glyphicon glyphicon-remove\"></span>\r\n");
      out.write("                        삭제\r\n");
      out.write("                    </button>\r\n");
      out.write("                    <button type=\"button\" class=\"btn btn-default\" onclick=\"location.href='/codestudy/board/reply.do';\">\r\n");
      out.write("                        <span class=\"glyphicon glyphicon-share-alt\"></span>\r\n");
      out.write("                        답변\r\n");
      out.write("                    </button>\r\n");
      out.write("                </div>\r\n");
      out.write("                <div style=\"clear:both;\"></div>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("                <!-- \r\n");
      out.write("                <table class=\"table comment\">\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <span class=\"comment\">제목입니다.</span>\r\n");
      out.write("                            <span class=\"date\">2020-01-01 10:10:10</span>\r\n");
      out.write("                            <span class=\"name\">홍길동(hong)</span>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <span class=\"comment\">제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.제목입니다.</span>\r\n");
      out.write("                            <span class=\"date\">2020-01-01 10:10:10</span>\r\n");
      out.write("                            <span class=\"name\">홍길동(hong)</span>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                    <tr>\r\n");
      out.write("                        <td>\r\n");
      out.write("                            <span class=\"comment\">제목입니다.</span>\r\n");
      out.write("                            <span class=\"date\">2020-01-01 10:10:10</span>\r\n");
      out.write("                            <span class=\"name\">홍길동(hong)</span>\r\n");
      out.write("                            <span class=\"delete\">[삭제]</span>\r\n");
      out.write("                        </td>\r\n");
      out.write("                    </tr>\r\n");
      out.write("                </table>\r\n");
      out.write(" \t\t\t\t\r\n");
      out.write(" \t\t\t\t\r\n");
      out.write("                <div class=\"commentbox panel panel-default\">\r\n");
      out.write("                    <div class=\"panel-body\">\r\n");
      out.write("                        <input type=\"text\" class=\"form-control\" placeholder=\"comment\">\r\n");
      out.write("                    </div>\r\n");
      out.write("                </div>\r\n");
      out.write("                -->\r\n");
      out.write("                \r\n");
      out.write("                \r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<!-- ########## 내용 끝 -->\r\n");
      out.write("\r\n");
      out.write("\t</div>\r\n");
      out.write("\t<!-- ########## 본문 끝 -->\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\t<!-- ########## 하단 시작 -->\r\n");
      out.write("\t");
      out.write("\r\n");
      out.write("<div class=\"footer\">\r\n");
      out.write("\t<div>&copy;Copyright codestudy.com 2020 All rights reserved.</div>\r\n");
      out.write("</div>\r\n");
      out.write("<script src=\"/codestudy/js/main.js\"></script>\r\n");
      out.write("<!-- 2020.07.21.in -->");
      out.write("\r\n");
      out.write("\t<!-- ########## 하단 끝 -->\r\n");
      out.write("\t\r\n");
      out.write("\t<script>\r\n");
      out.write("    \r\n");
      out.write("    </script>\r\n");
      out.write("</body>\r\n");
      out.write("\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
